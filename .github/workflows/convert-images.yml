name: Convert JPG to WebP and Update Markdown on dev Branch  

on:  
  push:  
    branches:  
      - dev  # Replace with your main branch name  
    paths:  
      - "_posts/**.md"  
      - "assets/img/posts/**.jpg"  

jobs:  
  convert-images:  
    runs-on: ubuntu-latest  

    steps:  
      - name: Checkout repository  
        uses: actions/checkout@v3  
        with:  
          persist-credentials: false # Important to prevent using the default token  
          fetch-depth: 0 # Ensure full history is available for making commits  

      - name: Set up Node.js  
        uses: actions/setup-node@v3  
        with:  
          node-version: "20" # Specify the Node.js version if necessary  

      - name: Install ImageMagick and jq  
        run: |  
          sudo apt-get update  
          sudo apt-get install -y imagemagick jq  

      - name: Run image conversion and markdown update script  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Necessary for pushing changes  
        run: |  
          #!/bin/bash  
          set -e  

          # Function to generate LQIP using ImageMagick  
          generate_lqip() {  
            local input_image="$1"  
            # Resize to 20% and decrease quality to 10%, then encode in Base64  
            convert "$input_image" -resize 20% -quality 10 jpeg:- | base64 | tr -d '\n'  
          }  

          # Find all markdown files in _posts  
          find _posts -type f -name "*.md" | while read -r mdfile; do  
            echo "Processing Markdown file: $mdfile"  

            # Extract all image references with .jpg extension  
            grep -Po '!\[.*?\]\((.*?)\.jpg\)' "$mdfile" | while read -r imgref; do  
              # Extract the image path without extension  
              img_path=$(echo "$imgref" | grep -Po '!\[.*?\]\((.*?)\.jpg' | sed -E 's/!\[.*?\]\((.+)\.jpg/\1/')  
              
              # Normalize the image path  
              normalized_img_path=$(realpath --relative-to="$PWD" "$img_path.jpg" || echo "$img_path.jpg")  
              
              jpg_file_path="$normalized_img_path"  
              webp_file_path="${jpg_file_path%.jpg}.webp"  

              echo "Found image: $jpg_file_path"  

              # Check if the .jpg file exists  
              if [ ! -f "$jpg_file_path" ]; then  
                echo "Image file $jpg_file_path does not exist. Skipping."  
                continue  
              fi  

              # Convert .jpg to .webp  
              convert "$jpg_file_path" -quality 80 "$webp_file_path"  
              echo "Converted $jpg_file_path to $webp_file_path"  

              # Generate LQIP for the .webp image  
              lqip_data=$(generate_lqip "$webp_file_path")  
              echo "Generated LQIP for $webp_file_path"  

              # Update the Markdown file to use .webp and embed LQIP  
              # Example:  
              # ![Alt Text](../assets/img/posts/image.jpg)  
              # becomes  
              # ![Alt Text](../assets/img/posts/image.webp){: lqip="data:image/webp;base64,..." }  
              sed -i "s|(!\[.*\]($img_path\.jpg))|![\1](${img_path}.webp){: lqip=\"data:image/webp;base64,$lqip_data\" }|g" "$mdfile"  
              echo "Updated Markdown reference to use .webp with LQIP"  

              # Remove the original .jpg file  
              rm "$jpg_file_path"  
              echo "Removed original image file: $jpg_file_path"  

            done  
          done  

          # Configure Git  
          git config user.name "github-actions[bot]"  
          git config user.email "github-actions[bot]@users.noreply.github.com"  

          # Add changes to git  
          # Using find to add specific file types to prevent 'pathspec' errors  
          find _posts -type f -name "*.md" -exec git add {} \;  
          find assets/img/posts -type f -name "*.webp" -exec git add {} \;  
          find assets/img/posts -type f -name "*.jpg" -exec git rm {} \;  

          # Commit changes if there are any  
          if ! git diff --cached --exit-code > /dev/null; then  
            git commit -m "Convert JPG images to WebP and update Markdown with LQIP [skip ci]"  
            echo "Committed changes."  

            # Push changes back to the dev branch  
            git push origin dev  
            echo "Pushed changes to dev branch."  
          else  
            echo "No changes to commit."  
          fi
